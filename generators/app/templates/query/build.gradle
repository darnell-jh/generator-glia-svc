plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.50'
    id 'com.palantir.docker' version '0.22.1'
    id 'org.jetbrains.kotlin.kapt' version '1.3.50'
}

apply plugin: 'io.spring.dependency-management'

group '<%=packageName%>'
version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    jcenter()
    mavenLocal()
}

dependencies {
    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    // Jackson
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    // Swagger
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    // Glia dependencies
    implementation 'com.dhenry.glia:glia-spring-boot-starter:2.0.0'
    implementation 'com.dhenry.glia:glia-cassandra-spring-boot-starter:2.0.0'
    implementation 'com.dhenry.glia:glia-rabbit-spring-boot-starter:2.0.0'
    testImplementation 'com.dhenry.glia:glia-spring-boot-starter-test:2.0.0'

    // Awaitility
    testApi 'org.awaitility:awaitility-kotlin:3.1.6'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

test {
  include '**/*UnitTest*'
}

task runUnitTests(type: Test) {
    description = 'Runs Unit Tests.'
    group = 'verification'

    filter {
        includeTestsMatching '*UnitTest'
    }
}

task runComponentTests(type: Test) {
    description = 'Runs Component Tests.'
    group = 'verification'

    filter {
        includeTestsMatching '*ComponentTest'
    }
}

docker {
    name "<%=binaryRepo%>/${project.name}"
    files jar.archiveFile
    tag 'asLocal', "${docker.name}:local"
    buildArgs([JAR_FILE: "${project.name}-${project.version}.jar"])
}

docker.dependsOn build

clean {
    delete 'out'
}

wrapper {
    gradleVersion = '5.6.3'
}
